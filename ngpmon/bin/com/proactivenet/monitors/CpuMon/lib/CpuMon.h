#ifndef  _STANDALONE_
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_proactivenet_monitors_CpuMon_CpuMon */

#ifndef _Included_com_proactivenet_monitors_CpuMon_CpuMon
#define _Included_com_proactivenet_monitors_CpuMon_CpuMon
#ifdef __cplusplus
extern "C" {
#endif
/* Inaccessible static: CONFIG */
/* Inaccessible static: STATS */
/* Inaccessible static: AVAIL */
/* Inaccessible static: NO_RESPONSE */
#undef com_proactivenet_monitors_CpuMon_CpuMon_ERROR
#define com_proactivenet_monitors_CpuMon_CpuMon_ERROR -1L
#undef com_proactivenet_monitors_CpuMon_CpuMon_NO_ERROR
#define com_proactivenet_monitors_CpuMon_CpuMon_NO_ERROR 0L
#undef com_proactivenet_monitors_CpuMon_CpuMon_NO_DATA
#define com_proactivenet_monitors_CpuMon_CpuMon_NO_DATA 0.0f
/* Inaccessible static: nativeCodeLoaded */
/*
 * Class:     com_proactivenet_monitors_CpuMon_CpuMon
 * Method:    getAvailability
 * Signature: (I)Z
 */
JNIEXPORT jint JNICALL Java_com_proactivenet_monitors_CpuMon_CpuMon_getAvailability
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_proactivenet_monitors_CpuMon_CpuMon
 * Method:    nativeInit
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_proactivenet_monitors_CpuMon_CpuMon_nativeInit
  (JNIEnv *, jclass);

/*
 * Class:     com_proactivenet_monitors_CpuMon_CpuMon
 * Method:    recordData
 * Signature: ()I
 */
JNIEXPORT jfloatArray JNICALL Java_com_proactivenet_monitors_CpuMon_CpuMon_recordData
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif

#else  /* _STANDALONE_ */
/*extern int getAvailability(int);
extern void nativeInit(void);
extern float *recordData(void);

extern int getProcessors();*/
#endif
